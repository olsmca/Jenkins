@Library('Jenkins-pipeline-shared-library') _ 

pipeline{
    agent any

    parameters{        
        string(name:'Branch', defaultValue: 'master', description: "Branch a utilizar")
        string(name:'Repositorio', defaultValue: 'https://github.com/olsmca/Jenkins.git', description: "URL del Repositorio")
        string(name:'teamDomain', defaultValue: 'negocio-eps', description: 'teamDomain a utilizar')
        string(name:'channel', defaultValue: '#pipeline-as-code', description: 'channel a utilizar')
        string(name:'token', defaultValue: 'kXvuJfAZwudfk6lHSxvduEaY', description: 'token a utilizar')
    }

stages {
    stage('Checkout') {
      steps {
        echo 'Descargando Repositorio'
        git branch: "${params.Branch}",
            url: "${params.Repositorio}"
      }
      post {
        always {
          echo 'ejecutar siempre'
          script {
            slackNotifier(currentBuild.currentResult)
          }
        }
      }
    }
    stage('Build') {
      steps {
        echo 'Compilando Proyecto'
        sh ''' gradle clean
                gradle bootJar
           '''
      }
      post {
        always {
          archiveArtifacts artifacts: 'build/libs/**/*.jar', fingerprint: true
          script {
            slackNotifier(currentBuild.currentResult)
          }
        }
      }
    }
    stage('Aprobar Ejecucion') {
      steps {
        input 'Quiere ejecutar test'
      }
    }
    stage('Test en Paralelo') {
      parallel {
        stage('Test Unitarios') {
          steps {
            sh 'gradle test'
            junit 'build/test-results/**/*.xml'
          }
          post {
                always {
                    echo 'llamado slacknotifier en libreria compartida'
                    script {
                        slackNotifier(currentBuild.currentResult)
                    }
                }
            }
        }
        stage('Analisis de Sonar') {
          steps {
            echo 'Ejecutando Analisis de codigo estatico'
          }
        }
      }
    }
    stage('Deploy') {
      steps {
        input 'Desea Desplegar en el Ambiente'
        echo 'Desplegando'
      }
    }
  }
  post {
        always {
            archiveArtifacts artifacts: 'build/test-results/**/*.xml', fingerprint: true
            deleteDir()

            echo 'llamado slacknotifier en libreria compartida'
            script {
                slackNotifier(currentBuild.currentResult)
            }
        }
    }
}
